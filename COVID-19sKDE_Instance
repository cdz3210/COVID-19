function COVID-19sKDE_Instance
clc
clear
close all


ChinaMap = shaperead('City347TW.shp');
XCityPolygons  = extractfield(ChinaMap,'X');    
YCityPolygons  = extractfield(ChinaMap,'Y');    


onsetcases = shaperead('onsetcases points');
XCoords = extractfield(onsetcases,'X')';     
YCoords = extractfield(onsetcases,'Y')';      
OnsetDate = char(extractfield(onsetcases,'onsetDate'));
OnsetDate = datenum([OnsetDate(:,1:4),char(32*ones(size(OnsetDate,1),1)),....
    OnsetDate(:,5:6),char(32*ones(size(OnsetDate,1),1)),OnsetDate(:,7:8)]);
CaseNo = extractfield(onsetcases,'SeqNo')';  
numberST  = ones(size(OnsetDate,1),1);    

UnqIlDate = unique(OnsetDate,'rows','stable');    
PredictPrbt = [nan,CaseNo';UnqIlDate,nan(size(UnqIlDate,1),numel(CaseNo))];
PredictPrbtMax =  PredictPrbt;
PredictVolume  =  PredictPrbt;

SampCov = cov([XCoords, YCoords]);
SigMat = length(XCoords)^(-1/3)*SampCov;   
RMat = chol(SigMat);

load('.\ChinaBaseMapTris.mat')
figure('Name','Chinese Map')    
MaxWindow

tic
for chkind = 1 : length(UnqIlDate)  
    
    currdate = UnqIlDate(chkind);   
    datestr(currdate)       
    
    histy = (OnsetDate <= currdate);  
    histyIllDate = OnsetDate(histy);  
    histyXCoords = XCoords(histy);  
    histyYCoords = YCoords(histy);  
    histyNumperday = numberST(histy);   
    %
    SimuPeriod = [min(histyOnsetDate), max(histyOnsetDate)]; 
    priordays = 16; 
    
    UnqHisXY = unique([histyXCoords, histyYCoords], 'rows', 'stable');
    
    RetroRisk = zeros(size(UnqHisXY,1), range(SimuPeriod)+priordays+1);
    
    for k = 1 : size(UnqHisXY,1)
        
        timeind = 1 : (histyOnsetDate(k) - min(histyOnsetDate) + priordays);
        RetroRisk(k,timeind) = 1 - (1 - RetroRisk(k,timeind)).*...
            (1 - DMFunc(timeind(end:-1:1))).^(histyNumperday(k));
    end
   
   
    KDE_RiskZ = zeros(length(XdataSet)+length(onsetcases), 2*priordays+1);
    ObsPots = UnqHisXY;
    XYgrids = [[XdataSet; XCoords], [YdataSet; YCoords]];
    ObserNum = length(ObsPots);
    TotalNum = length(XYgrids);
    %
    for indse = 1 : priordays
        %
        weghtRisk = RetroRisk(:,end-priordays-1 + indse); 
        Exps = zeros(TotalNum, ObserNum);
        for j = 1 : ObserNum
            normXY = (XYgrids - repmat(ObsPots(j,:),TotalNum,1))/RMat;
            Exps(:,j) = weghtRisk(j)*exp(-sum(normXY.^2,2)/2);
        end
        
        KernelFuns = sum(Exps,2)/ObserNum;    
        KDE_RiskZ(:,indse) = KernelFuns;
    end
    datestr(currdate)   %
    toc
    
	
    for indpdt = 1 : priordays  
        KDE_RiskZ(:,priordays+1+indpdt) = 1 - ...
            prod(1 - KDE_RiskZ(:, 1 : priordays).*...
            repmat(DMFunc(priordays+indpdt:-1:1+indpdt), TotalNum, 1), 2);
    end
   
    
    save(['KDE_Risk',datestr(currdate,'dd-mmm'),'.mat'],'KDE_RiskZ')
    

    for caseidx = 1 : length(CaseNo)
        if (IllDate(caseidx) > currdate) && ...
                (IllDate(caseidx) <= currdate+priordays)
            PredictPrbt(chkind+1,caseidx+1) = ...
                KDE_RiskZ(end-length(CaseNo)+caseidx,...
                IllDate(caseidx)-currdate+priordays+1);
            PredictPrbtMax(chkind+1,caseidx+1) = 
                max(KDE_RiskZ(:,IllDate(caseidx)-currdate+priordays+1));
            
            trimesh(TriAnglSet, XdataSet, YdataSet, ...
                KDE_RiskZ(1:end-length(onsetcases), ...
                IllDate(caseidx)-currdate+priordays+1) / ...
                PredictPrbtMax(chkind+1,caseidx+1), ...
                'EdgeColor', 'none', 'FaceColor', 'interp')
            
            colormap('jet');
            ColorData = colormap;
            ColorDataNew = zeros(85,3);
            ColorDataNew(1:3:85,:) = ColorData(36:64,:);
            ColorDataNew(2:3:83,:) = diff(ColorData(36:64,:))/3 + ...
                ColorData(36:63,:);
            ColorDataNew(3:3:84,:) = 2*diff(ColorData(36:64,:))/3 + ...
                ColorData(36:63,:);
            colormap(ColorDataNew)
            
            pos = get(gca,'pos');
            colorbar('FontName','Times New Roman','FontSize',12, ...
                'Position',[pos(1)+0.8*pos(3),pos(2)+pos(4)/6, ...
                0.012,pos(4)/3],'YTick',0:0.2:1.0)
            title(['Predicted COVID-19 Risk of Date: ', ...
                datestr(IllDate(caseidx)),...
                ' upon the Notifications as of ',datestr(currdate)], ...
                'FontName','Times New Roman','FontSize',18)
            set(gca,'DataAspectRatio',[2e6 2e6 1])
            hold on
            plot3(XCityPolygons, YCityPolygons, ...
                (1+max(RetroRisk(:)))*ones(size(XCityPolygons)), ...
                'k-','LineWidth',0.05)  
            plot3(XCoords(caseidx),YCoords(caseidx), ...
                2*ones(size(XCoords(caseidx))),'k*') 
            hold off
            axis off    
            view(0,90)
            set(gcf,'Renderer','zbuffer')
            pause(6)
            
            PredictVolume(chkind+1, caseidx+1) = TriVolume(TriAnglSet, ...
                XdataSet, YdataSet, KDE_RiskZ(1:end-length(CaseNo), ...
                IllDate(caseidx)-currdate+priordays+1));
        end
    end
    toc
end
%
xlswrite('KDEPredictPrbt',PredictPrbt)
xlswrite('KDEPredictPrbtMax',PredictPrbtMax)
xlswrite('KDEPredictSignificance',PredictPrbt./PredictPrbtMax)
xlswrite('KDEPredictVolume',PredictVolume)


function V = TriVolume(TriAnglSet, XdataSet, YdataSet, ZdataSet)

Sbase = zeros(size(TriAnglSet,1),1);
for idx = 1 : length(Sbase)
    Sbase(idx) = 1/2*det([XdataSet(TriAnglSet(idx,:)),YdataSet(TriAnglSet(idx,:)),ones(3,1)]);
end
V = sum(mean(ZdataSet(TriAnglSet),2).*Sbase);


function p = DMFunc(x)

lambd = 3.49812;  k = 2.3539;   
p = wblpdf(x,lambd,k);


function MaxWindow  
%
figname = get(gcf,'Name');
if isequal(get(gcf,'NumberTitle'),'on')
    figtag = ['Figure ',num2str(get(gcf,'Number'))];
    if ~isempty(figname)
        figtag = [figtag,': ',figname];
    end
else
    figtag = figname;
end
%
MDEInstance = com.mathworks.mde.desk.MLDesktop.getInstance;
drawnow
JavaObject = MDEInstance.getClient(figtag);
JavaFrame = JavaObject.getRootPane.getParent();
JavaFrame.setMaximized(1);
